// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Team-bluekunVRC/discord-bot/ent/discorduser"
	"github.com/Team-bluekunVRC/discord-bot/ent/user"
	"github.com/Team-bluekunVRC/discord-bot/ent/vrcuser"
	"github.com/google/uuid"
)

// VRCUser is the model entity for the VRCUser schema.
type VRCUser struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VRCUserQuery when eager-loading is set.
	Edges            VRCUserEdges `json:"edges"`
	discord_user_vrc *string
	vrc_user_user    *uuid.UUID
}

// VRCUserEdges holds the relations/edges for other nodes in the graph.
type VRCUserEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Discord holds the value of the discord edge.
	Discord *DiscordUser `json:"discord,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VRCUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DiscordOrErr returns the Discord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VRCUserEdges) DiscordOrErr() (*DiscordUser, error) {
	if e.loadedTypes[1] {
		if e.Discord == nil {
			// The edge discord was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: discorduser.Label}
		}
		return e.Discord, nil
	}
	return nil, &NotLoadedError{edge: "discord"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VRCUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vrcuser.FieldID:
			values[i] = new(sql.NullString)
		case vrcuser.ForeignKeys[0]: // discord_user_vrc
			values[i] = new(sql.NullString)
		case vrcuser.ForeignKeys[1]: // vrc_user_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type VRCUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VRCUser fields.
func (vu *VRCUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vrcuser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vu.ID = value.String
			}
		case vrcuser.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_user_vrc", values[i])
			} else if value.Valid {
				vu.discord_user_vrc = new(string)
				*vu.discord_user_vrc = value.String
			}
		case vrcuser.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field vrc_user_user", values[i])
			} else if value.Valid {
				vu.vrc_user_user = new(uuid.UUID)
				*vu.vrc_user_user = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the VRCUser entity.
func (vu *VRCUser) QueryUser() *UserQuery {
	return (&VRCUserClient{config: vu.config}).QueryUser(vu)
}

// QueryDiscord queries the "discord" edge of the VRCUser entity.
func (vu *VRCUser) QueryDiscord() *DiscordUserQuery {
	return (&VRCUserClient{config: vu.config}).QueryDiscord(vu)
}

// Update returns a builder for updating this VRCUser.
// Note that you need to call VRCUser.Unwrap() before calling this method if this VRCUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (vu *VRCUser) Update() *VRCUserUpdateOne {
	return (&VRCUserClient{config: vu.config}).UpdateOne(vu)
}

// Unwrap unwraps the VRCUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vu *VRCUser) Unwrap() *VRCUser {
	tx, ok := vu.config.driver.(*txDriver)
	if !ok {
		panic("ent: VRCUser is not a transactional entity")
	}
	vu.config.driver = tx.drv
	return vu
}

// String implements the fmt.Stringer.
func (vu *VRCUser) String() string {
	var builder strings.Builder
	builder.WriteString("VRCUser(")
	builder.WriteString(fmt.Sprintf("id=%v", vu.ID))
	builder.WriteByte(')')
	return builder.String()
}

// VRCUsers is a parsable slice of VRCUser.
type VRCUsers []*VRCUser

func (vu VRCUsers) config(cfg config) {
	for _i := range vu {
		vu[_i].config = cfg
	}
}
