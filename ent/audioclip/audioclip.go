// Code generated by entc, DO NOT EDIT.

package audioclip

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the audioclip type in the database.
	Label = "audio_clip"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStoragePath holds the string denoting the storage_path field in the database.
	FieldStoragePath = "storage_path"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// Table holds the table name of the audioclip in the database.
	Table = "audio_clips"
)

// Columns holds all SQL columns for audioclip fields.
var Columns = []string{
	FieldID,
	FieldStoragePath,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "audio_clips"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_audio",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// StoragePathValidator is a validator for the "storage_path" field. It is called by the builders before save.
	StoragePathValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeIntro Type = "intro"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeIntro:
		return nil
	default:
		return fmt.Errorf("audioclip: invalid enum value for type field: %q", _type)
	}
}
