// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Team-bluekunVRC/discord-bot/ent/discorduser"
	"github.com/Team-bluekunVRC/discord-bot/ent/predicate"
	"github.com/Team-bluekunVRC/discord-bot/ent/user"
	"github.com/Team-bluekunVRC/discord-bot/ent/vrcuser"
)

// DiscordUserQuery is the builder for querying DiscordUser entities.
type DiscordUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.DiscordUser
	// eager-loading edges.
	withUser *UserQuery
	withVrc  *VRCUserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DiscordUserQuery builder.
func (duq *DiscordUserQuery) Where(ps ...predicate.DiscordUser) *DiscordUserQuery {
	duq.predicates = append(duq.predicates, ps...)
	return duq
}

// Limit adds a limit step to the query.
func (duq *DiscordUserQuery) Limit(limit int) *DiscordUserQuery {
	duq.limit = &limit
	return duq
}

// Offset adds an offset step to the query.
func (duq *DiscordUserQuery) Offset(offset int) *DiscordUserQuery {
	duq.offset = &offset
	return duq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (duq *DiscordUserQuery) Unique(unique bool) *DiscordUserQuery {
	duq.unique = &unique
	return duq
}

// Order adds an order step to the query.
func (duq *DiscordUserQuery) Order(o ...OrderFunc) *DiscordUserQuery {
	duq.order = append(duq.order, o...)
	return duq
}

// QueryUser chains the current query on the "user" edge.
func (duq *DiscordUserQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: duq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := duq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := duq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discorduser.UserTable, discorduser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(duq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVrc chains the current query on the "vrc" edge.
func (duq *DiscordUserQuery) QueryVrc() *VRCUserQuery {
	query := &VRCUserQuery{config: duq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := duq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := duq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, selector),
			sqlgraph.To(vrcuser.Table, vrcuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discorduser.VrcTable, discorduser.VrcColumn),
		)
		fromU = sqlgraph.SetNeighbors(duq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DiscordUser entity from the query.
// Returns a *NotFoundError when no DiscordUser was found.
func (duq *DiscordUserQuery) First(ctx context.Context) (*DiscordUser, error) {
	nodes, err := duq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{discorduser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (duq *DiscordUserQuery) FirstX(ctx context.Context) *DiscordUser {
	node, err := duq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DiscordUser ID from the query.
// Returns a *NotFoundError when no DiscordUser ID was found.
func (duq *DiscordUserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = duq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{discorduser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (duq *DiscordUserQuery) FirstIDX(ctx context.Context) string {
	id, err := duq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DiscordUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one DiscordUser entity is not found.
// Returns a *NotFoundError when no DiscordUser entities are found.
func (duq *DiscordUserQuery) Only(ctx context.Context) (*DiscordUser, error) {
	nodes, err := duq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{discorduser.Label}
	default:
		return nil, &NotSingularError{discorduser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (duq *DiscordUserQuery) OnlyX(ctx context.Context) *DiscordUser {
	node, err := duq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DiscordUser ID in the query.
// Returns a *NotSingularError when exactly one DiscordUser ID is not found.
// Returns a *NotFoundError when no entities are found.
func (duq *DiscordUserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = duq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = &NotSingularError{discorduser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (duq *DiscordUserQuery) OnlyIDX(ctx context.Context) string {
	id, err := duq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DiscordUsers.
func (duq *DiscordUserQuery) All(ctx context.Context) ([]*DiscordUser, error) {
	if err := duq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return duq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (duq *DiscordUserQuery) AllX(ctx context.Context) []*DiscordUser {
	nodes, err := duq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DiscordUser IDs.
func (duq *DiscordUserQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := duq.Select(discorduser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (duq *DiscordUserQuery) IDsX(ctx context.Context) []string {
	ids, err := duq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (duq *DiscordUserQuery) Count(ctx context.Context) (int, error) {
	if err := duq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return duq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (duq *DiscordUserQuery) CountX(ctx context.Context) int {
	count, err := duq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (duq *DiscordUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := duq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return duq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (duq *DiscordUserQuery) ExistX(ctx context.Context) bool {
	exist, err := duq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DiscordUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (duq *DiscordUserQuery) Clone() *DiscordUserQuery {
	if duq == nil {
		return nil
	}
	return &DiscordUserQuery{
		config:     duq.config,
		limit:      duq.limit,
		offset:     duq.offset,
		order:      append([]OrderFunc{}, duq.order...),
		predicates: append([]predicate.DiscordUser{}, duq.predicates...),
		withUser:   duq.withUser.Clone(),
		withVrc:    duq.withVrc.Clone(),
		// clone intermediate query.
		sql:  duq.sql.Clone(),
		path: duq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithUser(opts ...func(*UserQuery)) *DiscordUserQuery {
	query := &UserQuery{config: duq.config}
	for _, opt := range opts {
		opt(query)
	}
	duq.withUser = query
	return duq
}

// WithVrc tells the query-builder to eager-load the nodes that are connected to
// the "vrc" edge. The optional arguments are used to configure the query builder of the edge.
func (duq *DiscordUserQuery) WithVrc(opts ...func(*VRCUserQuery)) *DiscordUserQuery {
	query := &VRCUserQuery{config: duq.config}
	for _, opt := range opts {
		opt(query)
	}
	duq.withVrc = query
	return duq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (duq *DiscordUserQuery) GroupBy(field string, fields ...string) *DiscordUserGroupBy {
	group := &DiscordUserGroupBy{config: duq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := duq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return duq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (duq *DiscordUserQuery) Select(fields ...string) *DiscordUserSelect {
	duq.fields = append(duq.fields, fields...)
	return &DiscordUserSelect{DiscordUserQuery: duq}
}

func (duq *DiscordUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range duq.fields {
		if !discorduser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if duq.path != nil {
		prev, err := duq.path(ctx)
		if err != nil {
			return err
		}
		duq.sql = prev
	}
	return nil
}

func (duq *DiscordUserQuery) sqlAll(ctx context.Context) ([]*DiscordUser, error) {
	var (
		nodes       = []*DiscordUser{}
		_spec       = duq.querySpec()
		loadedTypes = [2]bool{
			duq.withUser != nil,
			duq.withVrc != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &DiscordUser{config: duq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, duq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := duq.withUser; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*DiscordUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.User = []*User{}
		}
		query.withFKs = true
		query.Where(predicate.User(func(s *sql.Selector) {
			s.Where(sql.InValues(discorduser.UserColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.discord_user_user
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "discord_user_user" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "discord_user_user" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.User = append(node.Edges.User, n)
		}
	}

	if query := duq.withVrc; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*DiscordUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Vrc = []*VRCUser{}
		}
		query.withFKs = true
		query.Where(predicate.VRCUser(func(s *sql.Selector) {
			s.Where(sql.InValues(discorduser.VrcColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.discord_user_vrc
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "discord_user_vrc" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "discord_user_vrc" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Vrc = append(node.Edges.Vrc, n)
		}
	}

	return nodes, nil
}

func (duq *DiscordUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := duq.querySpec()
	return sqlgraph.CountNodes(ctx, duq.driver, _spec)
}

func (duq *DiscordUserQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := duq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (duq *DiscordUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discorduser.Table,
			Columns: discorduser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: discorduser.FieldID,
			},
		},
		From:   duq.sql,
		Unique: true,
	}
	if unique := duq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := duq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discorduser.FieldID)
		for i := range fields {
			if fields[i] != discorduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := duq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := duq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := duq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := duq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (duq *DiscordUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(duq.driver.Dialect())
	t1 := builder.Table(discorduser.Table)
	columns := duq.fields
	if len(columns) == 0 {
		columns = discorduser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if duq.sql != nil {
		selector = duq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range duq.predicates {
		p(selector)
	}
	for _, p := range duq.order {
		p(selector)
	}
	if offset := duq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := duq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DiscordUserGroupBy is the group-by builder for DiscordUser entities.
type DiscordUserGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dugb *DiscordUserGroupBy) Aggregate(fns ...AggregateFunc) *DiscordUserGroupBy {
	dugb.fns = append(dugb.fns, fns...)
	return dugb
}

// Scan applies the group-by query and scans the result into the given value.
func (dugb *DiscordUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dugb.path(ctx)
	if err != nil {
		return err
	}
	dugb.sql = query
	return dugb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := dugb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (dugb *DiscordUserGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(dugb.fields) > 1 {
		return nil, errors.New("ent: DiscordUserGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := dugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) StringsX(ctx context.Context) []string {
	v, err := dugb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dugb *DiscordUserGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dugb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = fmt.Errorf("ent: DiscordUserGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) StringX(ctx context.Context) string {
	v, err := dugb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (dugb *DiscordUserGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(dugb.fields) > 1 {
		return nil, errors.New("ent: DiscordUserGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := dugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) IntsX(ctx context.Context) []int {
	v, err := dugb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dugb *DiscordUserGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dugb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = fmt.Errorf("ent: DiscordUserGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) IntX(ctx context.Context) int {
	v, err := dugb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (dugb *DiscordUserGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(dugb.fields) > 1 {
		return nil, errors.New("ent: DiscordUserGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := dugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := dugb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dugb *DiscordUserGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dugb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = fmt.Errorf("ent: DiscordUserGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) Float64X(ctx context.Context) float64 {
	v, err := dugb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (dugb *DiscordUserGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(dugb.fields) > 1 {
		return nil, errors.New("ent: DiscordUserGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := dugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := dugb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dugb *DiscordUserGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dugb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = fmt.Errorf("ent: DiscordUserGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dugb *DiscordUserGroupBy) BoolX(ctx context.Context) bool {
	v, err := dugb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dugb *DiscordUserGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dugb.fields {
		if !discorduser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dugb *DiscordUserGroupBy) sqlQuery() *sql.Selector {
	selector := dugb.sql.Select()
	aggregation := make([]string, 0, len(dugb.fns))
	for _, fn := range dugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dugb.fields)+len(dugb.fns))
		for _, f := range dugb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dugb.fields...)...)
}

// DiscordUserSelect is the builder for selecting fields of DiscordUser entities.
type DiscordUserSelect struct {
	*DiscordUserQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (dus *DiscordUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := dus.prepareQuery(ctx); err != nil {
		return err
	}
	dus.sql = dus.DiscordUserQuery.sqlQuery(ctx)
	return dus.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dus *DiscordUserSelect) ScanX(ctx context.Context, v interface{}) {
	if err := dus.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (dus *DiscordUserSelect) Strings(ctx context.Context) ([]string, error) {
	if len(dus.fields) > 1 {
		return nil, errors.New("ent: DiscordUserSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := dus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dus *DiscordUserSelect) StringsX(ctx context.Context) []string {
	v, err := dus.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (dus *DiscordUserSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dus.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = fmt.Errorf("ent: DiscordUserSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dus *DiscordUserSelect) StringX(ctx context.Context) string {
	v, err := dus.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (dus *DiscordUserSelect) Ints(ctx context.Context) ([]int, error) {
	if len(dus.fields) > 1 {
		return nil, errors.New("ent: DiscordUserSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := dus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dus *DiscordUserSelect) IntsX(ctx context.Context) []int {
	v, err := dus.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (dus *DiscordUserSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dus.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = fmt.Errorf("ent: DiscordUserSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dus *DiscordUserSelect) IntX(ctx context.Context) int {
	v, err := dus.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (dus *DiscordUserSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(dus.fields) > 1 {
		return nil, errors.New("ent: DiscordUserSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := dus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dus *DiscordUserSelect) Float64sX(ctx context.Context) []float64 {
	v, err := dus.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (dus *DiscordUserSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dus.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = fmt.Errorf("ent: DiscordUserSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dus *DiscordUserSelect) Float64X(ctx context.Context) float64 {
	v, err := dus.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (dus *DiscordUserSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(dus.fields) > 1 {
		return nil, errors.New("ent: DiscordUserSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := dus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dus *DiscordUserSelect) BoolsX(ctx context.Context) []bool {
	v, err := dus.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (dus *DiscordUserSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dus.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{discorduser.Label}
	default:
		err = fmt.Errorf("ent: DiscordUserSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dus *DiscordUserSelect) BoolX(ctx context.Context) bool {
	v, err := dus.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dus *DiscordUserSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := dus.sql.Query()
	if err := dus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
