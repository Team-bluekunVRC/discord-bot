// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Team-bluekunVRC/discord-bot/ent/audioclip"
	"github.com/google/uuid"
)

// AudioClip is the model entity for the AudioClip schema.
type AudioClip struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StoragePath holds the value of the "storage_path" field.
	StoragePath string `json:"storage_path,omitempty"`
	// Type holds the value of the "type" field.
	Type       audioclip.Type `json:"type,omitempty"`
	user_audio *uuid.UUID
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AudioClip) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case audioclip.FieldStoragePath, audioclip.FieldType:
			values[i] = new(sql.NullString)
		case audioclip.FieldID:
			values[i] = new(uuid.UUID)
		case audioclip.ForeignKeys[0]: // user_audio
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AudioClip", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AudioClip fields.
func (ac *AudioClip) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case audioclip.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ac.ID = *value
			}
		case audioclip.FieldStoragePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_path", values[i])
			} else if value.Valid {
				ac.StoragePath = value.String
			}
		case audioclip.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ac.Type = audioclip.Type(value.String)
			}
		case audioclip.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_audio", values[i])
			} else if value.Valid {
				ac.user_audio = new(uuid.UUID)
				*ac.user_audio = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AudioClip.
// Note that you need to call AudioClip.Unwrap() before calling this method if this AudioClip
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AudioClip) Update() *AudioClipUpdateOne {
	return (&AudioClipClient{config: ac.config}).UpdateOne(ac)
}

// Unwrap unwraps the AudioClip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AudioClip) Unwrap() *AudioClip {
	tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AudioClip is not a transactional entity")
	}
	ac.config.driver = tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AudioClip) String() string {
	var builder strings.Builder
	builder.WriteString("AudioClip(")
	builder.WriteString(fmt.Sprintf("id=%v", ac.ID))
	builder.WriteString(", storage_path=")
	builder.WriteString(ac.StoragePath)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", ac.Type))
	builder.WriteByte(')')
	return builder.String()
}

// AudioClips is a parsable slice of AudioClip.
type AudioClips []*AudioClip

func (ac AudioClips) config(cfg config) {
	for _i := range ac {
		ac[_i].config = cfg
	}
}
