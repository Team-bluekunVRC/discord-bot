// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Team-bluekunVRC/discord-bot/ent/discorduser"
	"github.com/Team-bluekunVRC/discord-bot/ent/predicate"
	"github.com/Team-bluekunVRC/discord-bot/ent/user"
	"github.com/Team-bluekunVRC/discord-bot/ent/vrcuser"
	"github.com/google/uuid"
)

// DiscordUserUpdate is the builder for updating DiscordUser entities.
type DiscordUserUpdate struct {
	config
	hooks    []Hook
	mutation *DiscordUserMutation
}

// Where appends a list predicates to the DiscordUserUpdate builder.
func (duu *DiscordUserUpdate) Where(ps ...predicate.DiscordUser) *DiscordUserUpdate {
	duu.mutation.Where(ps...)
	return duu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (duu *DiscordUserUpdate) AddUserIDs(ids ...uuid.UUID) *DiscordUserUpdate {
	duu.mutation.AddUserIDs(ids...)
	return duu
}

// AddUser adds the "user" edges to the User entity.
func (duu *DiscordUserUpdate) AddUser(u ...*User) *DiscordUserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duu.AddUserIDs(ids...)
}

// AddVrcIDs adds the "vrc" edge to the VRCUser entity by IDs.
func (duu *DiscordUserUpdate) AddVrcIDs(ids ...string) *DiscordUserUpdate {
	duu.mutation.AddVrcIDs(ids...)
	return duu
}

// AddVrc adds the "vrc" edges to the VRCUser entity.
func (duu *DiscordUserUpdate) AddVrc(v ...*VRCUser) *DiscordUserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return duu.AddVrcIDs(ids...)
}

// Mutation returns the DiscordUserMutation object of the builder.
func (duu *DiscordUserUpdate) Mutation() *DiscordUserMutation {
	return duu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (duu *DiscordUserUpdate) ClearUser() *DiscordUserUpdate {
	duu.mutation.ClearUser()
	return duu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (duu *DiscordUserUpdate) RemoveUserIDs(ids ...uuid.UUID) *DiscordUserUpdate {
	duu.mutation.RemoveUserIDs(ids...)
	return duu
}

// RemoveUser removes "user" edges to User entities.
func (duu *DiscordUserUpdate) RemoveUser(u ...*User) *DiscordUserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duu.RemoveUserIDs(ids...)
}

// ClearVrc clears all "vrc" edges to the VRCUser entity.
func (duu *DiscordUserUpdate) ClearVrc() *DiscordUserUpdate {
	duu.mutation.ClearVrc()
	return duu
}

// RemoveVrcIDs removes the "vrc" edge to VRCUser entities by IDs.
func (duu *DiscordUserUpdate) RemoveVrcIDs(ids ...string) *DiscordUserUpdate {
	duu.mutation.RemoveVrcIDs(ids...)
	return duu
}

// RemoveVrc removes "vrc" edges to VRCUser entities.
func (duu *DiscordUserUpdate) RemoveVrc(v ...*VRCUser) *DiscordUserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return duu.RemoveVrcIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (duu *DiscordUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(duu.hooks) == 0 {
		affected, err = duu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duu.mutation = mutation
			affected, err = duu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(duu.hooks) - 1; i >= 0; i-- {
			if duu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (duu *DiscordUserUpdate) SaveX(ctx context.Context) int {
	affected, err := duu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (duu *DiscordUserUpdate) Exec(ctx context.Context) error {
	_, err := duu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duu *DiscordUserUpdate) ExecX(ctx context.Context) {
	if err := duu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duu *DiscordUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discorduser.Table,
			Columns: discorduser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: discorduser.FieldID,
			},
		},
	}
	if ps := duu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.UserTable,
			Columns: []string{discorduser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duu.mutation.RemovedUserIDs(); len(nodes) > 0 && !duu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.UserTable,
			Columns: []string{discorduser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.UserTable,
			Columns: []string{discorduser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duu.mutation.VrcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.VrcTable,
			Columns: []string{discorduser.VrcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vrcuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duu.mutation.RemovedVrcIDs(); len(nodes) > 0 && !duu.mutation.VrcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.VrcTable,
			Columns: []string{discorduser.VrcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vrcuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duu.mutation.VrcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.VrcTable,
			Columns: []string{discorduser.VrcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vrcuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, duu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discorduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DiscordUserUpdateOne is the builder for updating a single DiscordUser entity.
type DiscordUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscordUserMutation
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (duuo *DiscordUserUpdateOne) AddUserIDs(ids ...uuid.UUID) *DiscordUserUpdateOne {
	duuo.mutation.AddUserIDs(ids...)
	return duuo
}

// AddUser adds the "user" edges to the User entity.
func (duuo *DiscordUserUpdateOne) AddUser(u ...*User) *DiscordUserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duuo.AddUserIDs(ids...)
}

// AddVrcIDs adds the "vrc" edge to the VRCUser entity by IDs.
func (duuo *DiscordUserUpdateOne) AddVrcIDs(ids ...string) *DiscordUserUpdateOne {
	duuo.mutation.AddVrcIDs(ids...)
	return duuo
}

// AddVrc adds the "vrc" edges to the VRCUser entity.
func (duuo *DiscordUserUpdateOne) AddVrc(v ...*VRCUser) *DiscordUserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return duuo.AddVrcIDs(ids...)
}

// Mutation returns the DiscordUserMutation object of the builder.
func (duuo *DiscordUserUpdateOne) Mutation() *DiscordUserMutation {
	return duuo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (duuo *DiscordUserUpdateOne) ClearUser() *DiscordUserUpdateOne {
	duuo.mutation.ClearUser()
	return duuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (duuo *DiscordUserUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *DiscordUserUpdateOne {
	duuo.mutation.RemoveUserIDs(ids...)
	return duuo
}

// RemoveUser removes "user" edges to User entities.
func (duuo *DiscordUserUpdateOne) RemoveUser(u ...*User) *DiscordUserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duuo.RemoveUserIDs(ids...)
}

// ClearVrc clears all "vrc" edges to the VRCUser entity.
func (duuo *DiscordUserUpdateOne) ClearVrc() *DiscordUserUpdateOne {
	duuo.mutation.ClearVrc()
	return duuo
}

// RemoveVrcIDs removes the "vrc" edge to VRCUser entities by IDs.
func (duuo *DiscordUserUpdateOne) RemoveVrcIDs(ids ...string) *DiscordUserUpdateOne {
	duuo.mutation.RemoveVrcIDs(ids...)
	return duuo
}

// RemoveVrc removes "vrc" edges to VRCUser entities.
func (duuo *DiscordUserUpdateOne) RemoveVrc(v ...*VRCUser) *DiscordUserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return duuo.RemoveVrcIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duuo *DiscordUserUpdateOne) Select(field string, fields ...string) *DiscordUserUpdateOne {
	duuo.fields = append([]string{field}, fields...)
	return duuo
}

// Save executes the query and returns the updated DiscordUser entity.
func (duuo *DiscordUserUpdateOne) Save(ctx context.Context) (*DiscordUser, error) {
	var (
		err  error
		node *DiscordUser
	)
	if len(duuo.hooks) == 0 {
		node, err = duuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duuo.mutation = mutation
			node, err = duuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duuo.hooks) - 1; i >= 0; i-- {
			if duuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duuo *DiscordUserUpdateOne) SaveX(ctx context.Context) *DiscordUser {
	node, err := duuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duuo *DiscordUserUpdateOne) Exec(ctx context.Context) error {
	_, err := duuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duuo *DiscordUserUpdateOne) ExecX(ctx context.Context) {
	if err := duuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duuo *DiscordUserUpdateOne) sqlSave(ctx context.Context) (_node *DiscordUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discorduser.Table,
			Columns: discorduser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: discorduser.FieldID,
			},
		},
	}
	id, ok := duuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DiscordUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := duuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discorduser.FieldID)
		for _, f := range fields {
			if !discorduser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discorduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.UserTable,
			Columns: []string{discorduser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !duuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.UserTable,
			Columns: []string{discorduser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.UserTable,
			Columns: []string{discorduser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duuo.mutation.VrcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.VrcTable,
			Columns: []string{discorduser.VrcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vrcuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duuo.mutation.RemovedVrcIDs(); len(nodes) > 0 && !duuo.mutation.VrcCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.VrcTable,
			Columns: []string{discorduser.VrcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vrcuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duuo.mutation.VrcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discorduser.VrcTable,
			Columns: []string{discorduser.VrcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: vrcuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscordUser{config: duuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discorduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
