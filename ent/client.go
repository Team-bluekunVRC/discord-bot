// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Team-bluekunVRC/discord-bot/ent/migrate"
	"github.com/google/uuid"

	"github.com/Team-bluekunVRC/discord-bot/ent/audioclip"
	"github.com/Team-bluekunVRC/discord-bot/ent/discorduser"
	"github.com/Team-bluekunVRC/discord-bot/ent/image"
	"github.com/Team-bluekunVRC/discord-bot/ent/role"
	"github.com/Team-bluekunVRC/discord-bot/ent/user"
	"github.com/Team-bluekunVRC/discord-bot/ent/vrcuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AudioClip is the client for interacting with the AudioClip builders.
	AudioClip *AudioClipClient
	// DiscordUser is the client for interacting with the DiscordUser builders.
	DiscordUser *DiscordUserClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VRCUser is the client for interacting with the VRCUser builders.
	VRCUser *VRCUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AudioClip = NewAudioClipClient(c.config)
	c.DiscordUser = NewDiscordUserClient(c.config)
	c.Image = NewImageClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.User = NewUserClient(c.config)
	c.VRCUser = NewVRCUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		AudioClip:   NewAudioClipClient(cfg),
		DiscordUser: NewDiscordUserClient(cfg),
		Image:       NewImageClient(cfg),
		Role:        NewRoleClient(cfg),
		User:        NewUserClient(cfg),
		VRCUser:     NewVRCUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		AudioClip:   NewAudioClipClient(cfg),
		DiscordUser: NewDiscordUserClient(cfg),
		Image:       NewImageClient(cfg),
		Role:        NewRoleClient(cfg),
		User:        NewUserClient(cfg),
		VRCUser:     NewVRCUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AudioClip.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AudioClip.Use(hooks...)
	c.DiscordUser.Use(hooks...)
	c.Image.Use(hooks...)
	c.Role.Use(hooks...)
	c.User.Use(hooks...)
	c.VRCUser.Use(hooks...)
}

// AudioClipClient is a client for the AudioClip schema.
type AudioClipClient struct {
	config
}

// NewAudioClipClient returns a client for the AudioClip from the given config.
func NewAudioClipClient(c config) *AudioClipClient {
	return &AudioClipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audioclip.Hooks(f(g(h())))`.
func (c *AudioClipClient) Use(hooks ...Hook) {
	c.hooks.AudioClip = append(c.hooks.AudioClip, hooks...)
}

// Create returns a create builder for AudioClip.
func (c *AudioClipClient) Create() *AudioClipCreate {
	mutation := newAudioClipMutation(c.config, OpCreate)
	return &AudioClipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AudioClip entities.
func (c *AudioClipClient) CreateBulk(builders ...*AudioClipCreate) *AudioClipCreateBulk {
	return &AudioClipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AudioClip.
func (c *AudioClipClient) Update() *AudioClipUpdate {
	mutation := newAudioClipMutation(c.config, OpUpdate)
	return &AudioClipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AudioClipClient) UpdateOne(ac *AudioClip) *AudioClipUpdateOne {
	mutation := newAudioClipMutation(c.config, OpUpdateOne, withAudioClip(ac))
	return &AudioClipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AudioClipClient) UpdateOneID(id uuid.UUID) *AudioClipUpdateOne {
	mutation := newAudioClipMutation(c.config, OpUpdateOne, withAudioClipID(id))
	return &AudioClipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AudioClip.
func (c *AudioClipClient) Delete() *AudioClipDelete {
	mutation := newAudioClipMutation(c.config, OpDelete)
	return &AudioClipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AudioClipClient) DeleteOne(ac *AudioClip) *AudioClipDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AudioClipClient) DeleteOneID(id uuid.UUID) *AudioClipDeleteOne {
	builder := c.Delete().Where(audioclip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AudioClipDeleteOne{builder}
}

// Query returns a query builder for AudioClip.
func (c *AudioClipClient) Query() *AudioClipQuery {
	return &AudioClipQuery{
		config: c.config,
	}
}

// Get returns a AudioClip entity by its id.
func (c *AudioClipClient) Get(ctx context.Context, id uuid.UUID) (*AudioClip, error) {
	return c.Query().Where(audioclip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AudioClipClient) GetX(ctx context.Context, id uuid.UUID) *AudioClip {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AudioClipClient) Hooks() []Hook {
	return c.hooks.AudioClip
}

// DiscordUserClient is a client for the DiscordUser schema.
type DiscordUserClient struct {
	config
}

// NewDiscordUserClient returns a client for the DiscordUser from the given config.
func NewDiscordUserClient(c config) *DiscordUserClient {
	return &DiscordUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discorduser.Hooks(f(g(h())))`.
func (c *DiscordUserClient) Use(hooks ...Hook) {
	c.hooks.DiscordUser = append(c.hooks.DiscordUser, hooks...)
}

// Create returns a create builder for DiscordUser.
func (c *DiscordUserClient) Create() *DiscordUserCreate {
	mutation := newDiscordUserMutation(c.config, OpCreate)
	return &DiscordUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DiscordUser entities.
func (c *DiscordUserClient) CreateBulk(builders ...*DiscordUserCreate) *DiscordUserCreateBulk {
	return &DiscordUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiscordUser.
func (c *DiscordUserClient) Update() *DiscordUserUpdate {
	mutation := newDiscordUserMutation(c.config, OpUpdate)
	return &DiscordUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscordUserClient) UpdateOne(du *DiscordUser) *DiscordUserUpdateOne {
	mutation := newDiscordUserMutation(c.config, OpUpdateOne, withDiscordUser(du))
	return &DiscordUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscordUserClient) UpdateOneID(id string) *DiscordUserUpdateOne {
	mutation := newDiscordUserMutation(c.config, OpUpdateOne, withDiscordUserID(id))
	return &DiscordUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiscordUser.
func (c *DiscordUserClient) Delete() *DiscordUserDelete {
	mutation := newDiscordUserMutation(c.config, OpDelete)
	return &DiscordUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiscordUserClient) DeleteOne(du *DiscordUser) *DiscordUserDeleteOne {
	return c.DeleteOneID(du.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiscordUserClient) DeleteOneID(id string) *DiscordUserDeleteOne {
	builder := c.Delete().Where(discorduser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscordUserDeleteOne{builder}
}

// Query returns a query builder for DiscordUser.
func (c *DiscordUserClient) Query() *DiscordUserQuery {
	return &DiscordUserQuery{
		config: c.config,
	}
}

// Get returns a DiscordUser entity by its id.
func (c *DiscordUserClient) Get(ctx context.Context, id string) (*DiscordUser, error) {
	return c.Query().Where(discorduser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscordUserClient) GetX(ctx context.Context, id string) *DiscordUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a DiscordUser.
func (c *DiscordUserClient) QueryUser(du *DiscordUser) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discorduser.UserTable, discorduser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVrc queries the vrc edge of a DiscordUser.
func (c *DiscordUserClient) QueryVrc(du *DiscordUser) *VRCUserQuery {
	query := &VRCUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discorduser.Table, discorduser.FieldID, id),
			sqlgraph.To(vrcuser.Table, vrcuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discorduser.VrcTable, discorduser.VrcColumn),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiscordUserClient) Hooks() []Hook {
	return c.hooks.DiscordUser
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Create returns a create builder for Image.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id uuid.UUID) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImageClient) DeleteOneID(id uuid.UUID) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id uuid.UUID) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id uuid.UUID) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Create returns a create builder for Role.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id uuid.UUID) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoleClient) DeleteOneID(id uuid.UUID) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id uuid.UUID) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id uuid.UUID) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImages queries the images edge of a User.
func (c *UserClient) QueryImages(u *User) *ImageQuery {
	query := &ImageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ImagesTable, user.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAudio queries the audio edge of a User.
func (c *UserClient) QueryAudio(u *User) *AudioClipQuery {
	query := &AudioClipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(audioclip.Table, audioclip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AudioTable, user.AudioColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a User.
func (c *UserClient) QueryRole(u *User) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RoleTable, user.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// VRCUserClient is a client for the VRCUser schema.
type VRCUserClient struct {
	config
}

// NewVRCUserClient returns a client for the VRCUser from the given config.
func NewVRCUserClient(c config) *VRCUserClient {
	return &VRCUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vrcuser.Hooks(f(g(h())))`.
func (c *VRCUserClient) Use(hooks ...Hook) {
	c.hooks.VRCUser = append(c.hooks.VRCUser, hooks...)
}

// Create returns a create builder for VRCUser.
func (c *VRCUserClient) Create() *VRCUserCreate {
	mutation := newVRCUserMutation(c.config, OpCreate)
	return &VRCUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VRCUser entities.
func (c *VRCUserClient) CreateBulk(builders ...*VRCUserCreate) *VRCUserCreateBulk {
	return &VRCUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VRCUser.
func (c *VRCUserClient) Update() *VRCUserUpdate {
	mutation := newVRCUserMutation(c.config, OpUpdate)
	return &VRCUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VRCUserClient) UpdateOne(vu *VRCUser) *VRCUserUpdateOne {
	mutation := newVRCUserMutation(c.config, OpUpdateOne, withVRCUser(vu))
	return &VRCUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VRCUserClient) UpdateOneID(id string) *VRCUserUpdateOne {
	mutation := newVRCUserMutation(c.config, OpUpdateOne, withVRCUserID(id))
	return &VRCUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VRCUser.
func (c *VRCUserClient) Delete() *VRCUserDelete {
	mutation := newVRCUserMutation(c.config, OpDelete)
	return &VRCUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VRCUserClient) DeleteOne(vu *VRCUser) *VRCUserDeleteOne {
	return c.DeleteOneID(vu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VRCUserClient) DeleteOneID(id string) *VRCUserDeleteOne {
	builder := c.Delete().Where(vrcuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VRCUserDeleteOne{builder}
}

// Query returns a query builder for VRCUser.
func (c *VRCUserClient) Query() *VRCUserQuery {
	return &VRCUserQuery{
		config: c.config,
	}
}

// Get returns a VRCUser entity by its id.
func (c *VRCUserClient) Get(ctx context.Context, id string) (*VRCUser, error) {
	return c.Query().Where(vrcuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VRCUserClient) GetX(ctx context.Context, id string) *VRCUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a VRCUser.
func (c *VRCUserClient) QueryUser(vu *VRCUser) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vrcuser.Table, vrcuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vrcuser.UserTable, vrcuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(vu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiscord queries the discord edge of a VRCUser.
func (c *VRCUserClient) QueryDiscord(vu *VRCUser) *DiscordUserQuery {
	query := &DiscordUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vrcuser.Table, vrcuser.FieldID, id),
			sqlgraph.To(discorduser.Table, discorduser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vrcuser.DiscordTable, vrcuser.DiscordColumn),
		)
		fromV = sqlgraph.Neighbors(vu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VRCUserClient) Hooks() []Hook {
	return c.hooks.VRCUser
}
