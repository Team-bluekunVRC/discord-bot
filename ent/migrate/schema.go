// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AudioClipsColumns holds the columns for the "audio_clips" table.
	AudioClipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "storage_path", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"intro"}},
		{Name: "user_audio", Type: field.TypeUUID, Nullable: true},
	}
	// AudioClipsTable holds the schema information for the "audio_clips" table.
	AudioClipsTable = &schema.Table{
		Name:       "audio_clips",
		Columns:    AudioClipsColumns,
		PrimaryKey: []*schema.Column{AudioClipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "audio_clips_users_audio",
				Columns:    []*schema.Column{AudioClipsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DiscordUsersColumns holds the columns for the "discord_users" table.
	DiscordUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
	}
	// DiscordUsersTable holds the schema information for the "discord_users" table.
	DiscordUsersTable = &schema.Table{
		Name:       "discord_users",
		Columns:    DiscordUsersColumns,
		PrimaryKey: []*schema.Column{DiscordUsersColumns[0]},
	}
	// ImagesColumns holds the columns for the "images" table.
	ImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "storage_path", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"flier", "poster"}},
		{Name: "user_images", Type: field.TypeUUID, Nullable: true},
	}
	// ImagesTable holds the schema information for the "images" table.
	ImagesTable = &schema.Table{
		Name:       "images",
		Columns:    ImagesColumns,
		PrimaryKey: []*schema.Column{ImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "images_users_images",
				Columns:    []*schema.Column{ImagesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "user_role", Type: field.TypeUUID, Nullable: true},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "roles_users_role",
				Columns:    []*schema.Column{RolesColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "email", Type: field.TypeString},
		{Name: "discord_user_user", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_discord_users_user",
				Columns:    []*schema.Column{UsersColumns[2]},
				RefColumns: []*schema.Column{DiscordUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// VrcUsersColumns holds the columns for the "vrc_users" table.
	VrcUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "discord_user_vrc", Type: field.TypeString, Nullable: true},
		{Name: "vrc_user_user", Type: field.TypeUUID, Nullable: true},
	}
	// VrcUsersTable holds the schema information for the "vrc_users" table.
	VrcUsersTable = &schema.Table{
		Name:       "vrc_users",
		Columns:    VrcUsersColumns,
		PrimaryKey: []*schema.Column{VrcUsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "vrc_users_discord_users_vrc",
				Columns:    []*schema.Column{VrcUsersColumns[1]},
				RefColumns: []*schema.Column{DiscordUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "vrc_users_users_user",
				Columns:    []*schema.Column{VrcUsersColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AudioClipsTable,
		DiscordUsersTable,
		ImagesTable,
		RolesTable,
		UsersTable,
		VrcUsersTable,
	}
)

func init() {
	AudioClipsTable.ForeignKeys[0].RefTable = UsersTable
	ImagesTable.ForeignKeys[0].RefTable = UsersTable
	RolesTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = DiscordUsersTable
	VrcUsersTable.ForeignKeys[0].RefTable = DiscordUsersTable
	VrcUsersTable.ForeignKeys[1].RefTable = UsersTable
}
