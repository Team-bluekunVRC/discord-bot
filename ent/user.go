// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Team-bluekunVRC/discord-bot/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges             UserEdges `json:"edges"`
	discord_user_user *string
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// Audio holds the value of the audio edge.
	Audio []*AudioClip `json:"audio,omitempty"`
	// Role holds the value of the role edge.
	Role []*Role `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[0] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// AudioOrErr returns the Audio value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AudioOrErr() ([]*AudioClip, error) {
	if e.loadedTypes[1] {
		return e.Audio, nil
	}
	return nil, &NotLoadedError{edge: "audio"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RoleOrErr() ([]*Role, error) {
	if e.loadedTypes[2] {
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldEmail:
			values[i] = new(sql.NullString)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		case user.ForeignKeys[0]: // discord_user_user
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_user_user", values[i])
			} else if value.Valid {
				u.discord_user_user = new(string)
				*u.discord_user_user = value.String
			}
		}
	}
	return nil
}

// QueryImages queries the "images" edge of the User entity.
func (u *User) QueryImages() *ImageQuery {
	return (&UserClient{config: u.config}).QueryImages(u)
}

// QueryAudio queries the "audio" edge of the User entity.
func (u *User) QueryAudio() *AudioClipQuery {
	return (&UserClient{config: u.config}).QueryAudio(u)
}

// QueryRole queries the "role" edge of the User entity.
func (u *User) QueryRole() *RoleQuery {
	return (&UserClient{config: u.config}).QueryRole(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
